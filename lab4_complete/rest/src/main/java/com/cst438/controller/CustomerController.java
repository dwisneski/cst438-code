package com.cst438.controller;

import com.cst438.dto.*;
import com.cst438.service.TokenService;
import jakarta.validation.Valid;
import org.springframework.http.HttpStatus;
import org.springframework.security.core.Authentication;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.*;
import com.cst438.domain.*;
import org.springframework.web.server.ResponseStatusException;

import java.security.Principal;
import java.sql.Date;
import java.time.LocalDate;

import java.util.stream.Stream;

@RestController
public class CustomerController {

    // define variables for CustomerRepository, OrderRepository
    private final CustomerRepository customerRepository;
    private final OrderRepository orderRepository;
    private final TokenService tokenService;
    private final PasswordEncoder encoder;

    // use constructor injection to set values
    public CustomerController(
            CustomerRepository customerRepository,
            OrderRepository orderRepository,
            TokenService tokenService,
            PasswordEncoder encoder
    ) {
        this.customerRepository = customerRepository;
        this.orderRepository = orderRepository;
        this.tokenService = tokenService;
        this.encoder = encoder;
    }


    @GetMapping("/login")
    public CustomerLoginDTO login(Authentication authentication ) {
        Customer c = customerRepository.findCustomerByEmail(authentication.getName());
        String token = tokenService.generateToken(authentication);
        return new CustomerLoginDTO(
                c.getCustomerId(),
                c.getName(),
                token
        );

    }


    @PostMapping("/register")
    public CustomerDTO register(@Valid @RequestBody CustomerDTO dto) {
        // check that customer email does not already exist
        // if so throw  new ResponseStatusException(HttpStatus.BAD_REQUEST, "email already in use");
        Customer c = customerRepository.findCustomerByEmail(dto.email());
        if (c!=null) {
            throw  new ResponseStatusException(HttpStatus.BAD_REQUEST, "email already in use");
        }

        // create customer entity, set fields and save to database
        c = new Customer();
        c.setName(dto.name());
        c.setEmail(dto.email());
        c.setPassword(encoder.encode(dto.password()));
        // customerId is primary key and will generated by database
        customerRepository.save(c);
        // return CustomerDTO with id, name, email
        return new CustomerDTO(
                c.getCustomerId(),
                c.getName(),
                c.getEmail(),
                null,
                null
        );
    }

    @GetMapping("/orders")
    public Stream<OrderDTO> getOrders(Principal principal ) {
        // return the orders for a customer
        Customer c = customerRepository.findCustomerByEmail(principal.getName());
        return c.getOrders().stream().map( order -> new OrderDTO(
                order.getOrderId(),
                order.getOrderDate(),
                order.getItem(),
                order.getQuantity(),
                order.getPrice()
        ));

    }

    @PostMapping("/orders")
    public OrderDTO placeOrder(@Valid @RequestBody OrderDTO dto, Principal principal) {
        // verify customerId
        // create Order entity and save
        Customer c = customerRepository.findCustomerByEmail(principal.getName());
        if (c==null) {
            throw  new ResponseStatusException(HttpStatus.BAD_REQUEST, "customer not found");
        }
        Order order = new Order();
        order.setItem(dto.item());
        order.setQuantity(dto.quantity());
        order.setPrice(dto.price());
        order.setCustomer(c);
        order.setOrderDate(Date.valueOf(LocalDate.now()));
        orderRepository.save(order);
        return new OrderDTO(
                order.getOrderId(),
                order.getOrderDate(),
                order.getItem(),
                order.getQuantity(),
                order.getPrice()
        );
    }

    @PutMapping("/orders")
    public OrderDTO updateOrder(@Valid @RequestBody OrderDTO dto, Principal principal) {
        // find and update Order entity
        Order order = orderRepository.findById(dto.orderId()).orElse(null);
        // order not found or does not belong to user
        if (order==null || !order.getCustomer().getEmail().equals(principal.getName())) {
            throw  new ResponseStatusException(HttpStatus.BAD_REQUEST, "order not found");
        }
        order.setItem(dto.item());
        order.setQuantity(dto.quantity());
        order.setPrice(dto.price());
        orderRepository.save(order);
        return new OrderDTO(
                order.getOrderId(),
                order.getOrderDate(),
                order.getItem(),
                order.getQuantity(),
                order.getPrice()
        );
    }

    @DeleteMapping("/orders/{orderId}")
    public void deleteOrder(@PathVariable("orderId") int orderId, Principal principal) {
        // delete Order entity
        Order order = orderRepository.findById(orderId).orElse(null);
        // order not found or does not belong to user
        if (order!=null && order.getCustomer().getEmail().equals(principal.getName())) {
            orderRepository.deleteById(orderId);
        }
        // otherwise do nothing.
    }

}